{"version":3,"sources":["submissionCtrl.js","submissionManager.js","templates.js"],"names":["addScript","str","$","append","angular","module","directive","restrict","scope","idtest","commands","link","$scope","$elem","attrs","hasLoadedSimulation","parseJSON","e","console","error","selector","$on","event","args","animationFeatures","simulationInstance","trigger","templateUrl","controller","$sce","getDiffHtmlFromLines","src","dst","i","idest","indexStart","indexStop","length","res","substring","getDiffHtmlFromLog","log","resSol","resExp","excerptRow","iRow","realdiffRow","diffRow","rowsSol","displayedSolutionOutput","split","rowsExp","displayedExpectedOutput","Math","max","thisRowSol","thisRowExp","truncatedAfter","submissionManager","initConstants","showDetailsTests","hasLoadedAnim","SyncQueue","addSyncEndListeners","submission","idShown","initDetailsTests","configureLogsError","tests","task_sScriptAnimation","hasLoadedAnimation","loading","$broadcast","displayError","index","idTestToLog","nl2br","replace","toTrust","trustAsHtml","countTestsSucceeded","curSubtask","nbTestsSucceeded","iTest","submissionTests","iErrorCode","ERROR_NoError","hasFoundAnError","curTest","idApplied","submissionSubtasks","subtasks","subtask","cached","getStatusTest","isShown","id","dataITest","ID","getLog","evalFun","task","displayChecker","sLog","sLogParsed","JSON","parse","round","val","floor","firstCharDiff","inputStr","expectedStr","result","hasFoundError","pos","formatDate","date","months","Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec","toString","dayData","getImageAbsoluteUrl","idTask","md5","imageName","toLog","clickTest","idTest","arg","errorCode","this","ERROR_WrongAnswer","ERROR_AbortError","ERROR_BusError","ERROR_FloatingPointException","ERROR_SegFault","ERROR_TimeLimitExceeded","ERROR_TimeLimitExceededBis","ERROR_WrongAnswerBis","ERROR_ExecutionError","ERROR_WrongAnswerCheck","ERROR_StaticMemoryExceeded","ERROR_BusError35","ERROR_SegFault139","ERROR_RelativeScore","countSubtasksSucceeded","nbSubtasksSucceeded","bSuccess","getDataTest","status","classToApply","classImage","getClassTest","getClassImageTest","run","$templateCache","put"],"mappings":"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","file":"submission-manager.min.js","sourcesContent":["angular.module('submission-manager', []);\n\nangular.module('submission-manager').directive('animation', function()\n{\n   'use strict';\n   return {\n      restrict: 'EA',\n      //replace: true,\n      //transclude: true,\n      scope: {\n         idtest: '=',\n         commands: '='\n      },\n      link: function ($scope, $elem, attrs) \n      {\n         var hasLoadedSimulation = [];\n         hasLoadedSimulation[$scope.idtest] = false;\n         try {\n            $scope.commands = $.parseJSON($scope.commands);\n         } catch(e) {\n            console.error('can\\'t parse '+$scope.commands);\n         }\n         var selector = '#anim' + $scope.idtest + '';\n         $scope.$on(\"clickOnTest\", function (event, args) \n         {\n            if (args[0] == $scope.idtest && !hasLoadedSimulation[$scope.idtest])\n            {\n               hasLoadedSimulation[$scope.idtest] = true;\n               /*setTimeout( function() {\n               //$.getScript('animations/raphael-min.js', function() {\n                  //$.getScript('animations/animation.js', function () {\n                    // $.getScript('animations/anim_example.js', function() {\n                        simulationInstance(selector, animationFeatures(selector), $scope.commands);\n                     //});\n                  //});\n               //});\n               }, 1);*/\n               if (typeof animationFeatures !== 'undefined') {\n                  simulationInstance(selector, animationFeatures(selector), $scope.commands);\n               }\n               $('.restart').trigger('click');\n            }\n         });\n      },\n      templateUrl: 'submission-manager/anim.html'\n   };\n});\n\n// TODO: use eval\nfunction addScript (str)\n{\n   $('head').append('<script type=\"text/javascript\">' + str + '</script>');\n}\n\nangular.module('submission-manager').controller('submissionController', ['$scope', '$sce', function($scope, $sce)\n{\n   $scope.submissionManager = submissionManager;\n   $scope.submissionManager.initConstants($scope);\n\n//   $scope.loading = true;\n\n//   $scope.hasAskedSubmission = false;\n//   $scope.idShown = -1;\n   \n//   $scope.submission = new Array();\n//   $scope.submission.subtasks = new Array();\n   $scope.showDetailsTests = false; // Used when there are no subtasks.\n   $scope.hasLoadedAnim = false;\n\n   SyncQueue.addSyncEndListeners(\"submissionController.apply\", function () {\n      if ($scope.submission) \n      {\n         var idShown = $scope.initDetailsTests($scope.submission);\n         if (idShown !== -1)\n         {\n            $scope.idShown = idShown;\n         }\n         $scope.configureLogsError($scope.submission.tests);\n         if ($scope.submission.task_sScriptAnimation && !$scope.hasLoadedAnimation)\n         {\n            $scope.hasLoadedAnimation = true;\n            addScript($scope.submission.task_sScriptAnimation); // TODO: use eval instead?\n         }\n      }\n      $scope.loading = false;\n\n      if ($scope.idShown != -1 && $scope.submission)\n      {\n         if ($scope.submission.task_sScriptAnimation)\n         {\n            $scope.$broadcast(\"clickOnTest\", [$scope.idShown]);\n         }\n      }\n   });\n\n   $scope.displayError = function (index)\n   {\n      if ($scope.idTestToLog == -1 || $scope.idTestToLog == index)\n      {\n         $scope.idTestToLog = index;\n         return true;\n      }\n      else\n      {\n         return false;\n      }\n   };\n   \n   $scope.nl2br = function (str) {\n      return (str + '').replace(/([^>\\r\\n]?)(\\r\\n|\\n\\r|\\r|\\n)/g, '$1<br>$2');\n   };\n   \n   $scope.toTrust = function(str)\n   {\n      return $sce.trustAsHtml(str);\n   };\n   \n   $scope.countTestsSucceeded = function(curSubtask)\n   {\n      var nbTestsSucceeded = 0;\n      for (var iTest = 0; iTest < curSubtask.submissionTests.length; iTest++)\n      {\n         if (curSubtask.submissionTests[iTest].iErrorCode == $scope.ERROR_NoError)\n         {\n            nbTestsSucceeded++;\n         }\n      }\n      return nbTestsSucceeded;\n   };\n   \n   $scope.initDetailsTests = function(submission)\n   {\n      var idApplied = -1;\n      var hasFoundAnError,iTest,curTest;\n      // If there are subtasks in this problem\n      if (submission.submissionSubtasks && submission.submissionSubtasks.length > 0)\n      {\n         var subtasks = submission.submissionSubtasks;\n         hasFoundAnError = false;\n         for (var curSubtask = 0; curSubtask < subtasks.length; curSubtask++)\n         {\n            var subtask = subtasks[curSubtask];\n            \n            if (!subtask.cached) // If it is undefined, we set it.\n            {\n               subtask.cached = [];\n               subtask.cached.showDetailsTests = false;\n               \n               for (iTest = 0; iTest < subtask.submissionTests.length; iTest++) // Nevertheless, if we find a test that has an error, we automatically display it\n               {\n                  curTest = subtask.submissionTests[iTest];\n                  curTest.cached = [];\n                  if (submissionManager.getStatusTest(curTest.iErrorCode) != 'ok' && !hasFoundAnError) // We'll automatically display both the subtask and the test\n                  {\n                     subtask.cached.showDetailsTests = true;\n                     curTest.cached.isShown = true;\n                     hasFoundAnError = true;\n                     idApplied = curTest.id;\n                  }\n                  else\n                  {\n                     curTest.cached.isShown = false;\n                  }\n               }\n            }\n            else // Already set\n            {\n               hasFoundAnError = true;\n            }\n         }\n         \n         if (!hasFoundAnError) // No error => we display both the first subtask and the first test\n         {\n            subtasks[0].cached.showDetailsTests = true;\n            if (subtasks[0].submissionTests.length > 0) // We make sure that some tests exist\n            {\n               subtasks[0].submissionTests[0].cached.isShown = true;\n               idApplied = subtasks[0].submissionTests[0].id;\n            }\n         }\n      }\n      // If there are no subtasks\n      \n      if ($scope.submission.submissionSubtasks.length === 0 && $scope.submission.tests.length > 0)\n      {\n         hasFoundAnError = false;\n         \n         for (iTest = 0; iTest < submission.tests.length; iTest++)\n         {\n            curTest = submission.tests[iTest];\n            if (!curTest.cached) // We set it\n            {\n               curTest.cached = [];\n               if (submissionManager.getStatusTest(curTest.iErrorCode) != 'ok' && !hasFoundAnError)\n               {\n                  curTest.cached.isShown = true;\n                  hasFoundAnError = true;\n                  idApplied = curTest.id;\n               }\n               else\n               {\n                  curTest.cached.isShown = false;\n               }\n            }\n            else // Otherwise, it is already set.\n            {\n               hasFoundAnError = true;\n            }\n         }\n            \n         if (!hasFoundAnError)\n         {\n            submission.tests[0].cached.isShown = true;\n            idApplied = submission.tests[0].id;\n         }\n      }\n      \n      return idApplied;\n   };\n   \n   $scope.configureLogsError = function(tests)\n   {\n      for (var iTest = 0; iTest < tests.length; iTest++)\n      {\n         var dataITest = tests[iTest];\n         if (submissionManager.getStatusTest(dataITest.iErrorCode) == 'error' || submissionManager.getStatusTest(dataITest.iErrorCode) == 'errorNoLog')\n         {\n            $scope.displayError(dataITest.ID);\n         }\n      }\n   };\n\n   function getDiffHtmlFromLines(src, dst) {\n      if (src == '') return '';\n      if (dst == '') return '<span class=\"errorInLog\">'+src+'</span>';\n      var indexStart = -1;\n      var indexStop = -1;\n      var i, idest;\n      for (i = 0; i < src.length; i++) {\n         if (i >= dst.length) {\n            return src;\n         }\n         if (src[i] != dst[i]) {\n            indexStart = i;\n            break;\n         }\n      }\n      if (indexStart == -1) {\n         return src;\n      }\n      for (i = src.length-1; i >= 0; i--) {\n         idest = i + dst.length - src.length;\n         if (idest < 0 || src[i] != dst[idest]) {\n            indexStop = i;\n            break;\n         }\n      }\n      if (indexStop == -1) {\n         indexStop = src.length-1;\n      }\n      if (indexStop < indexStart) {\n         console.error('ho ho...');\n         return src;\n      }\n      var res = src.substring(0,indexStart);\n      res += '<span class=\"errorInLog\">';\n      res += src.substring(indexStart, indexStop+1);\n      res += '</span>';\n      res += src.substring(indexStop+1);\n      return res;\n   }\n\n   // The following function defines the behavior for the default log format. See\n   // the documentation of taskgrader for more information.\n   function getDiffHtmlFromLog(log) {\n      resSol = '';\n      resExp = '';\n      if (log.excerptRow > 1) {\n         resSol += '...\\n';\n         resExp += '...\\n';\n      }\n      var iRow;\n      var realdiffRow = log.diffRow - log.excerptRow;\n      var rowsSol = log.displayedSolutionOutput.split('\\n');\n      var rowsExp = log.displayedExpectedOutput.split('\\n');\n      for (iRow = 0; iRow < realdiffRow; iRow++) {\n         resSol += rowsSol[iRow]+'\\n';\n         resExp += rowsSol[iRow]+'\\n';\n      }\n      for (iRow = realdiffRow; iRow < Math.max(rowsSol.length, rowsExp.length); iRow++) {\n         var thisRowSol = iRow < rowsSol.length ? rowsSol[iRow] : '';\n         var thisRowExp = iRow < rowsExp.length ? rowsExp[iRow] : '';\n         resSol += getDiffHtmlFromLines(thisRowSol, thisRowExp);\n         resExp += getDiffHtmlFromLines(thisRowExp, thisRowSol);\n      }\n      if (log.truncatedAfter) {\n         resSol += '... ';\n         resExp += '... ';\n      }\n      res =  'Votre programme a affiché :<br>\\n';\n      res += '<pre>'+resSol+'</pre>';\n      res += 'alors que la réponse attendue était :<br>\\n';\n      res += '<pre>'+resExp+'</pre>';\n      res += 'Pour vous aider, le premier caractère différent est mis sur fond rouge.<br><br>Vérifiez bien que vous affichez exactement ce qui est demandé et rien de plus. Vérifiez aussi les retours à la ligne.';\n      return res;\n   }\n\n   $scope.getLog = function(curTest) {\n      var evalFun = curTest.submission.task.displayChecker;\n      if (evalFun) {\n         return evalFun(curTest);\n      }\n      var sLog = curTest.sLog;\n      try {\n         var sLogParsed = JSON.parse(sLog);\n      } catch (e) {\n         return 'Message d\\'évaluation :<pre>'+sLog+'</pre>';\n      }\n      return getDiffHtmlFromLog(sLogParsed);\n   };\n\n   $scope.round = function(val)\n   {\n      return Math.round(val);\n   };\n   \n   $scope.floor = function(val)\n   {\n      return Math.floor(val);\n   };\n   \n   $scope.firstCharDiff = function(inputStr, expectedStr)\n   {\n      var result = \"\";\n      var hasFoundError = false;\n      for (var pos = 0; pos < inputStr.length; pos++)\n      {\n         if (inputStr[pos] == expectedStr[pos] || hasFoundError)\n         {\n            result += inputStr[pos];\n         }\n         else\n         {\n            result += \"<span class=\\\"charDiff\\\">\" + inputStr[pos] + \"</span>\";\n            hasFoundError = true;\n         }\n      }\n      return result;\n   };\n   \n   $scope.formatDate = function(date) // Not used\n   {\n      var months = [];\n      months.Jan = \"01\";\n      months.Feb = \"02\";\n      months.Mar = \"03\";\n      months.Apr = \"04\";\n      months.May = \"05\";\n      months.Jun = \"06\";\n      months.Jul = \"07\";\n      months.Aug = \"08\";\n      months.Sep = \"09\";\n      months.Oct = \"10\";\n      months.Nov = \"11\";\n      months.Dec = \"12\";\n      \n      date = date.toString();\n      date = date.split(' ');\n      \n      var dayData = date[4].split(':');\n      \n      var str = date[2] + \"/\" + months[date[1]] + \"/\" + date[3] + \" à \" + dayData[0] + ':' + dayData[1];\n      return str;\n   };\n   \n   $scope.getImageAbsoluteUrl = function(idTask, md5, imageName)\n   {\n      return 'http://data.france-ioi.org/' + idTask + '/' + md5 + '/' + imageName;\n   };\n   \n   $scope.toLog = function (str) // Debug function - to remove later\n   {\n      console.log(str);\n   };\n   \n   $scope.clickTest = function(idTest)\n   {\n      var arg = [idTest];\n      $scope.$broadcast(\"clickOnTest\", arg);\n   };\n}]);\n","var submissionManager = {\n   errorCode: {},\n   initConstants: function($scope)\n   {\n      // Returned by the evaluation servers\n      this.errorCode.ERROR_NoError = 0;\n      this.errorCode.ERROR_WrongAnswer = 1;\n      this.errorCode.ERROR_AbortError = 6;\n      this.errorCode.ERROR_BusError = 7;\n      this.errorCode.ERROR_FloatingPointException = 8;\n      this.errorCode.ERROR_SegFault = 11;\n      this.errorCode.ERROR_TimeLimitExceeded = 137;\n\n      // Use locally\n      this.errorCode.ERROR_TimeLimitExceededBis = 9;\n      this.errorCode.ERROR_WrongAnswerBis = 2;\n      this.errorCode.ERROR_ExecutionError = 3;\n      this.errorCode.ERROR_WrongAnswerCheck = 4;\n\n      // Not used anymore\n      this.errorCode.ERROR_StaticMemoryExceeded = 10;\n      this.errorCode.ERROR_BusError35 = 35;\n      this.errorCode.ERROR_SegFault139 = 139;\n\n      // Not used in DB, only here\n      this.errorCode.ERROR_RelativeScore = 150;\n\n      // Returned by the evaluation servers\n      $scope.ERROR_NoError = 0;\n      $scope.ERROR_WrongAnswer = 1;\n      $scope.ERROR_AbortError = 6;\n      $scope.ERROR_BusError = 7;\n      $scope.ERROR_FloatingPointException = 8;\n      $scope.ERROR_SegFault = 11;\n      $scope.ERROR_TimeLimitExceeded = 137;\n\n      // Use locally\n      $scope.ERROR_TimeLimitExceededBis = 9;\n      $scope.ERROR_WrongAnswerBis = 2;\n      $scope.ERROR_ExecutionError = 3;\n      $scope.ERROR_WrongAnswerCheck = 4;\n\n      // Not used anymore\n      $scope.ERROR_StaticMemoryExceeded = 10;\n      $scope.ERROR_BusError35 = 35;\n      $scope.ERROR_SegFault139 = 139;\n\n      // Not used in DB, only here\n      $scope.ERROR_RelativeScore = 150;\n   },\n\n   countSubtasksSucceeded : function(submission)\n   {\n      var nbSubtasksSucceeded = 0;\n      for (var curSubtask = 0; curSubtask < submission.submissionSubtasks.length; curSubtask++)\n      {\n         if (submission.submissionSubtasks[curSubtask].bSuccess)\n         {\n            nbSubtasksSucceeded++;\n         }\n      }\n\n      return nbSubtasksSucceeded;\n   },\n\n   getDataTest : function(iErrorCode)\n   {\n      var res = null;\n      switch (iErrorCode)\n      {\n         case this.errorCode.ERROR_NoError:\n            res = {\n               status: 'ok',\n               classToApply: 'succeed_test',\n               classImage: 'glyphicon glyphicon-ok image_succeed_test',\n            };\n            break;\n         case this.errorCode.ERROR_WrongAnswer:\n         case this.errorCode.ERROR_WrongAnswerBis:\n            res = {\n               status: 'error',\n               classToApply: 'error_test',\n               classImage: 'glyphicon glyphicon-remove image_error_test',\n            };\n            break;\n         case this.errorCode.ERROR_WrongAnswerCheck:\n            res = {\n               status: 'errorNoLog',\n               classToApply: 'error_test',\n               classImage: 'glyphicon glyphicon-remove image_error_test',\n            };\n            break;\n         case this.errorCode.ERROR_AbortError:\n            res = {\n               status: 'abort',\n               classToApply: 'crash_test',\n               classImage: 'glyphicon glyphicon-fire image_crash_test',\n               };\n            break;\n         case this.errorCode.ERROR_BusError:\n         case this.errorCode.ERROR_BusError35:\n            res = {\n               status: 'busError',\n               classToApply: 'crash_test',\n               classImage: 'glyphicon glyphicon-fire image_crash_test',\n               };\n            break;\n         case this.errorCode.ERROR_FloatingPointException:\n            res = {\n               status: 'floatingPointException',\n               classToApply: 'crash_test',\n               classImage: 'glyphicon glyphicon-fire image_crash_test',\n               };\n            break;\n         /* Seg fault <=> memory problem */\n         case this.errorCode.ERROR_SegFault:\n         case this.errorCode.ERROR_StaticMemoryExceeded:\n         case this.errorCode.ERROR_SegFault139:\n            res = {\n               status: 'memory',\n               classToApply: 'crash_test',\n               classImage: 'glyphicon glyphicon-fire image_crash_test',\n               };\n            break;\n         case this.errorCode.ERROR_TimeLimitExceeded:\n         case this.errorCode.ERROR_TimeLimitExceededBis:\n            res = {\n               status: 'timeout',\n               classToApply: 'timeout_test',\n               classImage: 'glyphicon glyphicon-time image_timeout_test',\n            };\n            break;\n         case this.errorCode.ERROR_RelativeScore:\n            res = {\n               status: 'relative',\n               classToApply: 'relative_test',\n               classImage: 'glyphicon glyphicon-ok image_relative_test',\n            };\n            break;\n      }\n      return res;\n   },\n\n   getStatusTest: function(iErrorCode)\n   {\n      return submissionManager.getDataTest(iErrorCode).status;\n   },\n\n   getClassTest: function(iErrorCode)\n   {\n      return submissionManager.getDataTest(iErrorCode).classToApply;\n   },\n\n   getClassImageTest: function(iErrorCode)\n   {\n      //alert(submissionManager.getDataTest(iErrorCode).classImage);\n      return submissionManager.getDataTest(iErrorCode).classImage;\n   }\n};\n","angular.module(\"submission-manager\").run([\"$templateCache\", function($templateCache) {$templateCache.put(\"submission-manager/anim.html\",\"<div id=\\\"anim{{idtest}}\\\">\\n\t<div style=\\\"text-align:center\\\">\\n\t   <!-- The place to do the simulation -->\\n\t   <div class=\\\"simuShow\\\">\\n\t   </div>\\n\t   <!-- The place to display texte -->\\n\t   <div class=\\\"simuMsg\\\">   \\n\t   </div>\\n\t   <!-- Toolbar -->\\n\t   <div class=\\\"simuToolbar\\\">\\n\t\t  <!--<input type=\\\"button\\\" class=\\\"play\\\" value=\\\"Exécuter tout\\\" />\\n\t\t  <input type=\\\"button\\\" class=\\\"pause\\\" value=\\\"Exécuter une étape\\\" />\\n\t\t  <input type=\\\"button\\\" class=\\\"restart\\\" value=\\\"Recommencer\\\" />-->\\n        <button href=\\\"#\\\" class=\\\"play btn btn-default\\\">Exécuter tout</button>\\n        <button href=\\\"#\\\" class=\\\"pause btn btn-default\\\">Exécuter une étape</button>\\n        <button href=\\\"#\\\" class=\\\"restart btn btn-default\\\">Recommencer</button>\\n\t   </div>\\n\t   <pre class=\\\"textOutput\\\" style=\\\"display:none;background:#C0C0C0;text-align:left\\\">\\n\t   </pre>\\n\t</div>\\n</div>\\n\");\n$templateCache.put(\"submission-manager/header_template.html\",\"<div class=\\\"submission\\\" ng-if=\\\"!loading\\\">\\n   <span class=\\\"submission_span submission_info\\\">\\n      <span class=\\\"glyphicon glyphicon-refresh glyphicon-refresh-animate image_loading checkImage\\\" ng-show=\\\"!submission.bEvaluated\\\"></span>\\n      <span class=\\\"glyphicon glyphicon-ok image_succeed_task checkImage\\\" ng-show=\\\"submission.bEvaluated && submission.bSuccess\\\"></span>\\n      <span class=\\\"glyphicon glyphicon-remove image_failure_task checkImage\\\" ng-show=\\\"submission.bEvaluated && !submission.bSuccess\\\"></span>\\n      <span ng-show=\\\"submission.bEvaluated\\\">\\n         Soumission en {{submission.sourceCode.params.sLangProg}}\\n         le {{submission.sDate | date:\\'dd/MM/yyyy à HH:mm\\'}}\\n      </span>\\n      <span ng-show=\\\"!submission.bEvaluated\\\">\\n         Soumission en cours d\\'évaluation...\\n      </span>\\n   </span>\\n\\n   <span class=\\\"submission_span submission_data\\\"> <!-- centered data -->\\n   </span>\\n   <span class=\\\"submission_span score\\\" ng-if=\\\"submission.bEvaluated\\\">Score : {{submission.iScore}} %</span>\\n   <span class=\\\"submission_span score\\\" ng-if=\\\"!submission.bEvaluated\\\">Évaluation en cours...</span>\\n\\n   <br>\\n\\n   <span class=\\\"submission_details\\\" ng-if=\\\"submission.bEvaluated\\\">\\n      <span ng-if=\\\"submission.submissionSubtasks.length > 0\\\">Sous-tâches validées : {{submissionManager.countSubtasksSucceeded(submission)}} / {{submission.submissionSubtasks.length}}</span>\\n      <span ng-if=\\\"submission.submissionSubtasks.length == 0\\\">Test validés : {{submission.nbTestsPassed}} / {{submission.nbTestsTotal}}</span>\\n      &nbsp;&nbsp;\\n      <span class=\\\"submission_min_test disp_min\\\" ng-if=\\\"!submission.submissionSubtasks\\\" ng-repeat=\\\"curTest in submission.tests\\\" ng-include src=\\\"\\'submission-manager/view_test_min.html\\'\\\"></span>\\n      <span class=\\\"submission_min_test\\\" ng-if=\\\"submission.submissionSubtasks\\\" ng-repeat=\\\"submissionSubtask in submission.submissionSubtasks\\\">\\n        <span ng-repeat=\\\"curTest in submissionSubtask.submissionTests\\\" ng-include src=\\\"\\'submission-manager/view_test_min.html\\'\\\"  class=\\\"disp_min\\\"></span>\\n        &nbsp;&nbsp;\\n      </span>\\n   </span>\\n </div>\\n\");\n$templateCache.put(\"submission-manager/image_test.html\",\"<span ng-if=\\\"curTest.iScore == 0 || curTest.iScore == 100\\\" class=\\\"{{submissionManager.getClassImageTest(curTest.iErrorCode)}}\\\"></span>\\n<span ng-if=\\\"!(curTest.iScore == 0 || curTest.iScore == 100)\\\" class=\\\"{{submissionManager.getClassImageTest(ERROR_RelativeScore)}}\\\"></span>\\n\");\n$templateCache.put(\"submission-manager/submission.html\",\"<div class=\\\"submission_global\\\">\\n   <div ng-if=\\\"submission != undefined\\\" ng-hide=\\\"loading\\\">\\n      <uib-accordion close-others=\\\"false\\\">\\n         <uib-accordion-group is-open=\\\"showSubmission\\\">\\n            <uib-accordion-heading>\\n               <div ng-include src=\\\"\\'submission-manager/header_template.html\\'\\\"></div>\\n            </uib-accordion-heading>\\n            <div ng-if=\\\"submission != undefined && !submission.bEvaluated && !loading\\\" class=\\\"submission_global\\\">\\n               <div class=\\\"submission_error\\\">\\n                  <p>\\n                    Cette soumission est en train d\\'être évaluée.\\n                  </p>\\n               </div>\\n            </div>\\n            <div ng-if=\\\"submission.bEvaluated\\\">\\n               <div ng-show=\\\"submission.bCompilError\\\" class=\\\"submission_error\\\">\\n                  <strong>Erreur de compilation :</strong><br />\\n                  <pre>{{submission.sCompilMsg}}</pre>\\n               </div>\\n\\n               <div ng-show=\\\"!(submission.tests.length > 0) && !submission.bCompilError && submission.bEvaluated\\\" class=\\\"submission_error\\\">\\n                  <p>\\n                     Il n\\'existe pas de tests pour ce problème.\\n                  </p>\\n               </div>\\n               <div ng-hide=\\\"!submission.bEvaluated || submission.bCompilError\\\" ng-if=\\\"submission.tests.length > 0\\\">\\n                  <div ng-if=\\\"submission.sCompilMsg.length > 0\\\" class=\\\"compil_error\\\">\\n                     Résultat de la compilation :\\n                     <pre>{{submission.sCompilMsg}}</pre>\\n                  </div>\\n                  <div ng-if=\\\"submission.submissionSubtasks.length > 0\\\">\\n                     <uib-accordion close-others=\\\"true\\\">\\n                        <uib-accordion-group ng-repeat=\\\"submissionSubtask in submission.submissionSubtasks\\\" class=\\\"subtask_global\\\" is-open=\\\"submissionSubtask.cached.showDetailsTests\\\">\\n                           <div ng-include src=\\\"\\'submission-manager/view_subtask.html\\'\\\"></div>\\n                        </uib-accordion-group>\\n                     </uib-accordion>\\n                  </div>\\n                  <div class=\\\"test\\\" ng-if=\\\"submission.submissionSubtasks.length == 0\\\">\\n                     <uib-accordion close-others=\\\"true\\\">\\n                        <uib-accordion-group ng-repeat=\\\"curTest in submission.tests | orderBy : curTest.iRank\\\" is-open=\\\"curTest.cached.isShown\\\">\\n                           <div ng-include src=\\\"\\'submission-manager/view_test.html\\'\\\"></div>\\n                        </uib-accordion-group>\\n                     </uib-accordion>\\n                  </div>\\n               </div> <!-- End tests -->\\n            </div>\\n         </uib-accordion-group>\\n      </uib-accordion>\\n   </div> <!-- End submission details -->\\n</div> <!-- End submission -->\\n\");\n$templateCache.put(\"submission-manager/view_subtask.html\",\"<uib-accordion-heading>\\n   <div class=\\\"subtask\\\">\\n      <span class=\\\"subtask_name\\\">\\n         <span class=\\\"glyphicon glyphicon-ok image_succeed_subtask\\\" ng-show=\\\"submissionSubtask.bSuccess\\\"></span>\\n         <span class=\\\"glyphicon glyphicon-remove image_failure_subtask\\\" ng-show=\\\"!submissionSubtask.bSuccess\\\"></span>\\n         {{submissionSubtask.subtask_name}}\\n      </span>\\n\\n      <span class=\\\"subtask_data\\\">\\n         <span>\\n            Tests validés : {{countTestsSucceeded(submissionSubtask)}} / {{submissionSubtask.submissionTests.length}}\\n            <span class=\\\"subtask_min_test\\\">\\n               <span ng-repeat=\\\"curTest in submissionSubtask.submissionTests\\\" ng-include src=\\\"\\'submission-manager/view_test_min.html\\'\\\"  class=\\\"disp_min\\\"></span>\\n            </span>\\n         </span>\\n      </span>\\n\\n      <span class=\\\"score\\\">\\n         Score : {{round(submissionSubtask.iScore * submissionSubtask.subtask_iPointsMax / 100)}} / {{submissionSubtask.subtask_iPointsMax}}\\n      </span>\\n   </div>\\n</uib-accordion-heading>\\n\\n<div class=\\\"test\\\">\\n   <uib-accordion close-others=\\\"true\\\">\\n      <uib-accordion-group ng-repeat=\\\"curTest in submissionSubtask.submissionTests | orderBy : curTest.iRank\\\" is-open=\\\"curTest.cached.isShown\\\">\\n         <div ng-include src=\\\"\\'submission-manager/view_test.html\\'\\\"></div>\\n      </uib-accordion-group>\\n   </uib-accordion>\\n</div>\\n\");\n$templateCache.put(\"submission-manager/view_test.html\",\"<uib-accordion-heading>\\n   <p ng-click=\\\"clickTest(curTest.id)\\\" ng-if=\\\"curTest.iScore > 0 && curTest.iScore < 100\\\" class=\\\"heading_test\\\"> <!-- i.e relative score -->\\n      <span class=\\\"idTest\\\">\\n         <span ng-include src=\\\"\\'submission-manager/image_test.html\\'\\\" class=\\\"imageTest\\\"></span>\\n         <span ng-if=\\\"curTest.test_sGroupType == \\'Evaluation\\'\\\">Test n°{{$index+1}} &nbsp; &nbsp;</span>\\n         <span ng-if=\\\"curTest.test_sGroupType !== \\'Evaluation\\'\\\">{{curTest.test_sName}} &nbsp; &nbsp;</span>\\n      </span>\\n      <span class=\\\"resultTest {{submissionManager.getClassTest(ERROR_RelativeScore)}}\\\">\\n         Score partiel de {{curTest.iScore}}% en {{floor(curTest.iTimeMs/10)/100}} s\\n      </span>\\n   </p>\\n   <p ng-click=\\\"clickTest(curTest.id)\\\" ng-if=\\\"!(curTest.iScore > 0 && curTest.iScore < 100)\\\" ng-switch=\\\"submissionManager.getStatusTest(curTest.iErrorCode)\\\" class=\\\"heading_test\\\">\\n      <span class=\\\"idTest\\\">\\n         <span ng-include src=\\\"\\'submission-manager/image_test.html\\'\\\" class=\\\"imageTest\\\"></span>\\n         <span ng-if=\\\"curTest.test_sGroupType == \\'Evaluation\\'\\\">Test n°{{$index+1}} &nbsp; &nbsp;</span>\\n         <span ng-if=\\\"curTest.test_sGroupType !== \\'Evaluation\\'\\\">{{curTest.test_sName}} &nbsp; &nbsp;</span>\\n      </span>\\n      <span class=\\\"resultTest {{submissionManager.getClassTest(curTest.iErrorCode)}}\\\" ng-switch-when=\\\"ok\\\">\\n         Réponse correcte en {{floor(curTest.iTimeMs/10)/100}} s\\n      </span>\\n      <span class=\\\"resultTest {{submissionManager.getClassTest(curTest.iErrorCode)}}\\\" ng-switch-when=\\\"error\\\">\\n         Réponse incorrecte\\n      </span>\\n      <span class=\\\"resultTest {{submissionManager.getClassTest(curTest.iErrorCode)}}\\\" ng-switch-when=\\\"errorNoLog\\\">\\n         Erreur dans le résultat\\n      </span>\\n      <span class=\\\"resultTest {{submissionManager.getClassTest(curTest.iErrorCode)}}\\\" ng-switch-when=\\\"abort\\\">\\n         Abort\\n      </span>\\n      <span class=\\\"resultTest {{submissionManager.getClassTest(curTest.iErrorCode)}}\\\" ng-switch-when=\\\"busError\\\">\\n         Bus Error\\n      </span>\\n      <span class=\\\"resultTest {{submissionManager.getClassTest(curTest.iErrorCode)}}\\\" ng-switch-when=\\\"floatingPointExpression\\\">\\n         Floating point Expression\\n      </span>\\n      <span class=\\\"resultTest {{submissionManager.getClassTest(curTest.iErrorCode)}}\\\" ng-switch-when=\\\"memory\\\">\\n         Accès mémoire invalide\\n      </span>\\n      <span class=\\\"resultTest {{submissionManager.getClassTest(curTest.iErrorCode)}}\\\" ng-switch-when=\\\"timeout\\\">\\n         Limite de temps dépassée\\n      </span>\\n   </p>\\n\\n</uib-accordion-heading>\\n<!--<td ng-switch=\\\"curTest.iErrorCode\\\">-->\\n\\n<div ng-if=\\\"curTest.iScore > 0 && curTest.iScore < 100\\\" class=\\\"output\\\"> <!-- i.e relative score -->\\n   Vous avez obtenu un score partiel. Vous pouvez améliorer votre programme pour augmenter votre score.\\n   <div ng-if=\\\"curTest.sLog || curTest.jFiles\\\">\\n      <div ng-bind-html=\\\"toTrust(getLog(curTest))\\\"></div>\\n   </div>\\n</div>\\n\\n<div ng-if=\\\"curTest.sOutput != \\'\\' && hasLoadedAnimation\\\" class=\\\"output\\\" animation commands=\\\"curTest.sOutput\\\" idtest=\\\"curTest.id\\\"></div>\\n\\n<div ng-if=\\\"!(curTest.iScore > 0 && curTest.iScore < 100) && !(curTest.sOutput != \\'\\' && hasLoadedAnimation)\\\" class=\\\"output\\\">\\n   <div ng-switch=\\\"submissionManager.getStatusTest(curTest.iErrorCode)\\\">\\n      <span ng-switch-when=\\\"ok\\\">\\n         Bravo, votre programme a validé ce test.\\n      </span>\\n      <span ng-switch-when=\\\"error\\\">\\n         <span ng-if=\\\"displayError(curTest.ID) && curTest.sOutput.length == 0\\\"> <!-- We use datas in tm_submissions to display log errors if there\\'s nothing in tm_submissions_tests -->\\n            Votre programme a renvoyé :<br/>\\n            <pre class=\\\"log\\\">{{submission.sFirstUserOutput}}</pre>\\n\\n            Il aurait dû renvoyer :<br/>\\n            <pre class=\\\"log\\\">{{submission.sFirstExpectedOutput}}</pre>\\n\\n            <span ng-show=\\\"curTest.iErrorCode == ERROR_WrongAnswer\\\"> <!-- diff shall not be shown when iErrorCode = ERROR_WrongAnswerBis -->\\n               Pour vous aider, voici le premier caractère différent : <br />\\n               <pre class=\\\"log\\\" ng-bind-html=\\\"toTrust(firstCharDiff(submission.sFirstUserOutput, submission.sFirstExpectedOutput))\\\"></pre>\\n            </span>\\n         </span>\\n         <span ng-if=\\\"displayError(curTest.ID) && curTest.sOutput.length > 0\\\"> <!-- Otherwise, we use datas in tm_submissions_tests -->\\n            Votre programme a renvoyé :<br/>\\n            <pre class=\\\"log\\\">{{curTest.sOutput}}</pre>\\n\\n            Il aurait dû renvoyer :<br/>\\n            <pre class=\\\"log\\\">{{curTest.sExpectedOutput}}</pre>\\n            <span ng-show=\\\"curTest.iErrorCode == ERROR_WrongAnswer\\\"> <!-- diff shall not be shown when iErrorCode = ERROR_WrongAnswerBis -->\\n               Pour vous aider, voici le premier caractère différent : <br />\\n               <pre class=\\\"log\\\" ng-bind-html=\\\"toTrust(firstCharDiff(curTest.sOutput, curTest.sExpectedOutput))\\\"></pre>\\n            </span>\\n         </span>\\n         <span ng-if=\\\"!displayError(curTest.ID) && !curTest.sLog && !curTest.jFiles && !curTest.sErrorMsg\\\">\\n            Aucun log n\\'est disponible pour ce test.\\n         </span>\\n      </span>\\n      <span ng-switch-when=\\\"errorNoLog\\\">\\n         <pre ng-show=\\\"displayError(curTest.ID) && curTest.sOutput.length > 0\\\" class=\\\"log\\\">{{curTest.sOutput}}</pre>\\n      </span>\\n      <span ng-switch-when=\\\"abort\\\">\\n         Votre programme a retourné un <code>Abort</code>.\\n         En C++, il peut s\\'agir d\\'une exception non traitée par votre programme.\\n      </span>\\n      <span ng-switch-when=\\\"busError\\\">\\n         Votre programme a retourné un <code>Bus Error</code>.\\n         Il peut s\\'agir d\\'un problème lié à l\\'utilisation de pointeurs.\\n      </span>\\n      <span ng-switch-when=\\\"floatingPointExpression\\\">\\n         Votre programme s\\'est terminé par un <code>floating point exception</code>.\\n         Il a probablement tenté d\\'effectuer une division par zéro.\\n      </span>\\n      <span ng-switch-when=\\\"memory\\\">\\n         Votre programme a échoué à la suite d\\'un accès mémoire en dehors des zones réservées, ou d\\'un dépassement de la limite de mémoire.<br />\\n         Votre programme s\\'est terminé à la suite d\\'une erreur. Cela peut venir d\\'une des raisons suivantes :\\n         <ul>\\n            <li>Votre programme a dépassé la limite de mémoire autorisée pour ce problème, que ce soit sous la forme de variables statiques, d\\'allocations dynamiques, ou bien de la pile.</li>\\n            <li>Votre programme a tenté de faire un accès mémoire en dehors des zones allouées.</li>\\n         </ul>\\n      </span>\\n      <span ng-switch-when=\\\"timeout\\\">\\n         Votre programme a dépassé la limite de temps.<br />\\n         Cela peut venir de deux raisons :\\n         <ul>\\n            <li>soit il est trop lent pour passer ce test dans la limite de temps du sujet.</li>\\n            <li>soit il boucle indéfiniment et ne se termine jamais.</li>\\n         </ul>\\n      </span>\\n      <span ng-switch-default>\\n         Un problème a eu lieu lors de la récupération des informations concernant le test.\\n      </span>\\n   </div>\\n   <div ng-if=\\\"curTest.sErrorMsg\\\">\\n      Message d\\'erreur renvoyé à l\\'évaluation :\\n      <pre>{{curTest.sErrorMsg}}</pre>\\n   </div>\\n   <div ng-if=\\\"curTest.sLog || curTest.jFiles\\\">\\n      <div ng-bind-html=\\\"toTrust(getLog(curTest))\\\"></div>\\n   </div>\\n</div>\\n\");\n$templateCache.put(\"submission-manager/view_test_min.html\",\"<span ng-if=\\\"curTest.iScore == 0 || curTest.iScore == 100\\\" class=\\\"imageTest\\\" ng-class=\\\"submissionManager.getClassImageTest(curTest.iErrorCode)\\\"></span>\\n<span ng-if=\\\"!(curTest.iScore == 0 || curTest.iScore == 100)\\\" class=\\\"imageTest\\\" ng-class=\\\"submissionManager.getClassImageTest(ERROR_RelativeScore)\\\"></span>\\n\");}]);"],"sourceRoot":"/source/"}