{"version":3,"sources":["submissionCtrl.js","submissionManager.js","templates.js"],"names":["addScript","str","$","append","angular","module","directive","restrict","scope","idtest","commands","link","$scope","$elem","attrs","hasLoadedSimulation","Array","parseJSON","e","console","error","selector","$on","event","args","anumationFeatures","simulationInstance","animationFeatures","trigger","templateUrl","controller","$sce","submissionManager","initConstants","showDetailsTests","hasLoadedAnim","SyncQueue","addSyncEndListeners","undefined","submission","idShown","initDetailsTests","configureLogsError","tests","task_sScriptAnimation","hasLoadedAnimation","loading","$apply","$broadcast","displayError","index","idTestToLog","nl2br","replace","toTrust","trustAsHtml","countTestsSucceeded","curSubtask","nbTestsSucceeded","iTest","submissionTests","length","iErrorCode","ERROR_NoError","idApplied","submissionSubtasks","subtasks","hasFoundAnError","subtask","cached","curTest","getStatusTest","isShown","id","dataITest","ID","round","val","Math","floor","firstCharDiff","inputStr","expectedStr","result","hasFoundError","pos","formatDate","date","months","toString","split","dayData","getImageAbsoluteUrl","idTask","md5","imageName","toLog","log","clickTest","idTest","arg","errorCode","this","ERROR_WrongAnswer","ERROR_AbortError","ERROR_BusError","ERROR_FloatingPointException","ERROR_SegFault","ERROR_TimeLimitExceeded","ERROR_TimeLimitExceededBis","ERROR_WrongAnswerBis","ERROR_ExecutionError","ERROR_WrongAnswerCheck","ERROR_StaticMemoryExceeded","ERROR_BusError35","ERROR_SegFault139","ERROR_RelativeScore","countSubtasksSucceeded","nbSubtasksSucceeded","iSuccess","getDataTest","status","classToApply","classImage","getClassTest","getClassImageTest","run","$templateCache","put"],"mappings":"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","file":"submission-manager.min.js","sourcesContent":["angular.module('submission-manager', []);\n\nangular.module('submission-manager').directive('animation', function()\n{\n   return {\n      restrict: 'EA',\n      //replace: true,\n      //transclude: true,\n      scope: {\n         idtest: '=',\n         commands: '='\n      },\n      link: function ($scope, $elem, attrs) \n      {\n         \n         var hasLoadedSimulation = new Array();\n         hasLoadedSimulation[$scope.idtest] = false;\n         try {\n            $scope.commands = $.parseJSON($scope.commands);\n         } catch(e) {\n            console.error('can\\'t parse '+$scope.commands);\n         }\n         var selector = '#anim' + $scope.idtest + '';\n         $scope.$on(\"clickOnTest\", function (event, args) \n         {\n            if (args[0] == $scope.idtest && !hasLoadedSimulation[$scope.idtest])\n            {\n               hasLoadedSimulation[$scope.idtest] = true;\n               /*setTimeout( function() {\n               //$.getScript('animations/raphael-min.js', function() {\n                  //$.getScript('animations/animation.js', function () {\n                    // $.getScript('animations/anim_example.js', function() {\n                        simulationInstance(selector, animationFeatures(selector), $scope.commands);\n                     //});\n                  //});\n               //});\n               }, 1);*/\n               if (typeof anumationFeatures !== 'undefined') {\n                  simulationInstance(selector, animationFeatures(selector), $scope.commands);\n               }\n               $('.restart').trigger('click');\n            }\n         });\n      },\n      templateUrl: 'submission-manager/animations/anim.html'\n   };\n});\n\n// TODO: use eval\nfunction addScript (str)\n{\n   $('head').append('<script type=\"text/javascript\">' + str + '</script>');\n}\n\nangular.module('submission-manager').controller('submissionController', ['$scope', '$sce', function($scope, $sce)\n{\n   $scope.submissionManager = submissionManager;\n   $scope.submissionManager.initConstants($scope);\n\n//   $scope.loading = true;\n\n//   $scope.hasAskedSubmission = false;\n//   $scope.idShown = -1;\n   \n//   $scope.submission = new Array();\n//   $scope.submission.subtasks = new Array();\n   $scope.showDetailsTests = false; // Used when there are no subtasks.\n   $scope.hasLoadedAnim = false;\n\n   SyncQueue.addSyncEndListeners(\"submissionController.apply\", function () {\n      if ($scope.submission != undefined) \n      {\n         var idShown = $scope.initDetailsTests($scope.submission);\n         if (idShown != -1)\n         {\n            $scope.idShown = idShown;\n         }\n         $scope.configureLogsError($scope.submission.tests);\n         if ($scope.submission.task_sScriptAnimation != '' && !$scope.hasLoadedAnimation)\n         {\n            $scope.hasLoadedAnimation = true;\n            addScript($scope.submission.task_sScriptAnimation); // TODO: use eval instead?\n         }\n      }\n      $scope.loading = false;\n      $scope.$apply();\n\n      if ($scope.idShown != -1 && $scope.submission != undefined)\n      {\n         if ($scope.submission.task_sScriptAnimation != '')\n         {\n            $scope.$broadcast(\"clickOnTest\", [$scope.idShown]);\n         }\n      }\n   });\n\n   $scope.displayError = function (index)\n   {\n      if ($scope.idTestToLog == -1 || $scope.idTestToLog == index)\n      {\n         $scope.idTestToLog = index;\n         return true;\n      }\n      else\n      {\n         return false;\n      }\n   }\n   \n   $scope.nl2br = function (str) {\n      return (str + '').replace(/([^>\\r\\n]?)(\\r\\n|\\n\\r|\\r|\\n)/g, '$1<br>$2');\n   }\n   \n   $scope.toTrust = function(str)\n   {\n      return $sce.trustAsHtml(str);\n   }\n   \n   $scope.countTestsSucceeded = function(curSubtask)\n   {\n      var nbTestsSucceeded = 0;\n      for (var iTest = 0; iTest < curSubtask.submissionTests.length; iTest++)\n      {\n         if (curSubtask.submissionTests[iTest].iErrorCode == $scope.ERROR_NoError)\n         {\n            nbTestsSucceeded++;\n         }\n      }\n      return nbTestsSucceeded;\n   }\n   \n   $scope.initDetailsTests = function(submission)\n   {\n      var idApplied = -1;\n      // If there are subtasks in this problem\n      console.error(submission);\n      if (submission.submissionSubtasks && submission.submissionSubtasks.length > 0)\n      {\n         var subtasks = submission.submissionSubtasks;\n         var hasFoundAnError = false;\n         for (var curSubtask = 0; curSubtask < subtasks.length; curSubtask++)\n         {\n            var subtask = subtasks[curSubtask];\n            \n            if (subtask.cached == undefined) // If it is undefined, we set it.\n            {\n               subtask.cached = new Array();\n               subtask.cached.showDetailsTests = false;\n               \n               for (var iTest = 0; iTest < subtask.submissionTests.length; iTest++) // Nevertheless, if we find a test that has an error, we automatically display it\n               {\n                  var curTest = subtask.submissionTests[iTest];\n                  curTest.cached = new Array();\n                  if (submissionManager.getStatusTest(curTest.iErrorCode) != 'ok' && !hasFoundAnError) // We'll automatically display both the subtask and the test\n                  {\n                     subtask.cached.showDetailsTests = true;\n                     curTest.cached.isShown = true;\n                     hasFoundAnError = true;\n                     idApplied = curTest.id;\n                  }\n                  else\n                  {\n                     curTest.cached.isShown = false;\n                  }\n               }\n            }\n            else // Already set\n            {\n               hasFoundAnError = true;\n            }\n         }\n         \n         if (!hasFoundAnError) // No error => we display both the first subtask and the first test\n         {\n            subtasks[0].cached.showDetailsTests = true;\n            if (subtasks[0].submissionTests.length > 0) // We make sure that some tests exist\n            {\n               subtasks[0].submissionTests[0].cached.isShown = true;\n               idApplied = subtasks[0].submissionTests[0].id\n            }\n         }\n      }\n      // If there are no subtasks\n      \n      if ($scope.submission.submissionSubtasks.length == 0 && $scope.submission.tests.length > 0)\n      {\n         var hasFoundAnError = false;\n         \n         for (var iTest = 0; iTest < submission.tests.length; iTest++)\n         {\n            var curTest = submission.tests[iTest];\n            if (curTest.cached == undefined) // We set it\n            {\n               curTest.cached = new Array();\n               if (submissionManager.getStatusTest(curTest.iErrorCode) != 'ok' && !hasFoundAnError)\n               {\n                  curTest.cached.isShown = true;\n                  hasFoundAnError = true;\n                  idApplied = curTest.id;\n               }\n               else\n               {\n                  curTest.cached.isShown = false;\n               }\n            }\n            else // Otherwise, it is already set.\n            {\n               hasFoundAnError = true;\n            }\n         }\n            \n         if (!hasFoundAnError)\n         {\n            submission.tests[0].cached.isShown = true;\n            idApplied = submission.tests[0].id;\n         }\n      }\n      \n      return idApplied;\n   }\n   \n   $scope.configureLogsError = function(tests)\n   {\n      for (var iTest = 0; iTest < tests.length; iTest++)\n      {\n         var dataITest = tests[iTest];\n         if (submissionManager.getStatusTest(dataITest.iErrorCode) == 'error' || submissionManager.getStatusTest(dataITest.iErrorCode) == 'errorNoLog')\n         {\n            $scope.displayError(dataITest.ID);\n         }\n      }\n   }\n   \n   $scope.round = function(val)\n   {\n      return Math.round(val);\n   }\n   \n   $scope.floor = function(val)\n   {\n      return Math.floor(val);\n   }\n   \n   $scope.firstCharDiff = function(inputStr, expectedStr)\n   {\n      var result = \"\";\n      var hasFoundError = false;\n      for (var pos = 0; pos < inputStr.length; pos++)\n      {\n         if (inputStr[pos] == expectedStr[pos] || hasFoundError)\n         {\n            result += inputStr[pos];\n         }\n         else\n         {\n            result += \"<span class=\\\"charDiff\\\">\" + inputStr[pos] + \"</span>\";\n            hasFoundError = true;\n         }\n      }\n      return result;\n   }\n   \n   $scope.formatDate = function(date) // Not used\n   {\n      var months = new Array();\n      months[\"Jan\"] = \"01\";\n      months[\"Feb\"] = \"02\";\n      months[\"Mar\"] = \"03\";\n      months[\"Apr\"] = \"04\";\n      months[\"May\"] = \"05\";\n      months[\"Jun\"] = \"06\";\n      months[\"Jul\"] = \"07\";\n      months[\"Aug\"] = \"08\";\n      months[\"Sep\"] = \"09\";\n      months[\"Oct\"] = \"10\";\n      months[\"Nov\"] = \"11\";\n      months[\"Dec\"] = \"12\";\n      \n      date = date.toString();\n      date = date.split(' ');\n      \n      var dayData = date[4].split(':');\n      \n      var str = date[2] + \"/\" + months[date[1]] + \"/\" + date[3] + \" à \" + dayData[0] + ':' + dayData[1];\n      return str;\n   }\n   \n   $scope.getImageAbsoluteUrl = function(idTask, md5, imageName)\n   {\n      return 'http://data.france-ioi.org/' + idTask + '/' + md5 + '/' + imageName;\n   }\n   \n   $scope.toLog = function (str) // Debug function - to remove later\n   {\n      console.log(str);\n   }\n   \n   $scope.clickTest = function(idTest)\n   {\n      var arg = [idTest];\n      $scope.$broadcast(\"clickOnTest\", arg);\n   }\n}]);\n","var submissionManager = {\n   errorCode: {},\n\tinitConstants: function($scope)\n   {\n      // Returned by the evaluation servers\n      this.errorCode.ERROR_NoError = 0;\n      this.errorCode.ERROR_WrongAnswer = 1;\n      this.errorCode.ERROR_AbortError = 6;\n      this.errorCode.ERROR_BusError = 7;\n      this.errorCode.ERROR_FloatingPointException = 8;\n      this.errorCode.ERROR_SegFault = 11;\n      this.errorCode.ERROR_TimeLimitExceeded = 137;\n\n      // Use locally\n      this.errorCode.ERROR_TimeLimitExceededBis = 9;\n      this.errorCode.ERROR_WrongAnswerBis = 2;\n      this.errorCode.ERROR_ExecutionError = 3;\n      this.errorCode.ERROR_WrongAnswerCheck = 4;\n\n      // Not used anymore\n      this.errorCode.ERROR_StaticMemoryExceeded = 10;\n      this.errorCode.ERROR_BusError35 = 35;\n      this.errorCode.ERROR_SegFault139 = 139;\n      \n      // Not used in DB, only here\n      this.errorCode.ERROR_RelativeScore = 150;\n      \n      // Returned by the evaluation servers\n      $scope.ERROR_NoError = 0;\n      $scope.ERROR_WrongAnswer = 1;\n      $scope.ERROR_AbortError = 6;\n      $scope.ERROR_BusError = 7;\n      $scope.ERROR_FloatingPointException = 8;\n      $scope.ERROR_SegFault = 11;\n      $scope.ERROR_TimeLimitExceeded = 137;\n\n      // Use locally\n      $scope.ERROR_TimeLimitExceededBis = 9;\n      $scope.ERROR_WrongAnswerBis = 2;\n      $scope.ERROR_ExecutionError = 3;\n      $scope.ERROR_WrongAnswerCheck = 4;\n\n      // Not used anymore\n      $scope.ERROR_StaticMemoryExceeded = 10;\n      $scope.ERROR_BusError35 = 35;\n      $scope.ERROR_SegFault139 = 139;\n      \n      // Not used in DB, only here\n      $scope.ERROR_RelativeScore = 150;\n   },\n   \n   countSubtasksSucceeded : function(submission)\n   {\n      var nbSubtasksSucceeded = 0;\n      for (var curSubtask = 0; curSubtask < submission.submissionSubtasks.length; curSubtask++)\n      {\n         if (submission.submissionSubtasks[curSubtask].iSuccess == 1)\n         {\n            nbSubtasksSucceeded++;\n         }\n      }\n      \n      return nbSubtasksSucceeded;\n   },\n   \n   getDataTest : function(iErrorCode)\n   {\n      switch (iErrorCode)\n      {\n         case this.errorCode.ERROR_NoError:\n            return {\n               status: 'ok',\n               classToApply: 'succeed_test',\n               classImage: 'glyphicon glyphicon-ok image_succeed_test',\n            };\n            break;\n         case this.errorCode.ERROR_WrongAnswer:\n         case this.errorCode.ERROR_WrongAnswerBis:\n            return {\n               status: 'error',\n               classToApply: 'error_test',\n               classImage: 'glyphicon glyphicon-remove image_error_test',\n            };\n            break;\n         case this.errorCode.ERROR_WrongAnswerCheck:\n            return {\n               status: 'errorNoLog',\n               classToApply: 'error_test',\n               classImage: 'glyphicon glyphicon-remove image_error_test',\n            };\n            break;\n         case this.errorCode.ERROR_AbortError:\n            return {\n               status: 'abort',\n               classToApply: 'crash_test',\n               classImage: 'glyphicon glyphicon-fire image_crash_test',\n               };\n            break;\n         case this.errorCode.ERROR_BusError:\n         case this.errorCode.ERROR_BusError35:\n            return {\n               status: 'busError',\n               classToApply: 'crash_test',\n               classImage: 'glyphicon glyphicon-fire image_crash_test',\n               };\n            break;\n         case this.errorCode.ERROR_FloatingPointException:\n            return {\n               status: 'floatingPointException',\n               classToApply: 'crash_test',\n               classImage: 'glyphicon glyphicon-fire image_crash_test',\n               };\n            break;\n         /* Seg fault <=> memory problem */\n         case this.errorCode.ERROR_SegFault: \n         case this.errorCode.ERROR_StaticMemoryExceeded:\n         case this.errorCode.ERROR_SegFault139:\n            return {\n               status: 'memory',\n               classToApply: 'crash_test',\n               classImage: 'glyphicon glyphicon-fire image_crash_test',\n               };\n            break;\n         case this.errorCode.ERROR_TimeLimitExceeded:\n         case this.errorCode.ERROR_TimeLimitExceededBis:\n            return {\n               status: 'timeout',\n               classToApply: 'timeout_test',\n               classImage: 'glyphicon glyphicon-time image_timeout_test',\n            };\n            break;\n         case this.errorCode.ERROR_RelativeScore:\n            return {\n               status: 'relative',\n               classToApply: 'relative_test',\n               classImage: 'glyphicon glyphicon-ok image_relative_test',\n            };\n            break;\n      }\n   },\n   \n   getStatusTest: function(iErrorCode)\n   {\n      return submissionManager.getDataTest(iErrorCode).status;\n   },\n   \n   getClassTest: function(iErrorCode)\n   {\n      return submissionManager.getDataTest(iErrorCode).classToApply;\n   },\n   \n   getClassImageTest: function(iErrorCode)\n   {\n      //alert(submissionManager.getDataTest(iErrorCode).classImage);\n      return submissionManager.getDataTest(iErrorCode).classImage;\n   }\n};\n","angular.module(\"submission-manager\").run([\"$templateCache\", function($templateCache) {$templateCache.put(\"submission-manager/header_template.html\",\"<div class=\\\"submission\\\" ng-if=\\\"!loading\\\">\\n\t<span class=\\\"submission_span submission_info\\\">\\n\t   <span class=\\\"glyphicon glyphicon-ok image_succeed_task checkImage\\\" ng-show=\\\"submission.iSuccess == 1\\\"></span>\\n\t   <span class=\\\"glyphicon glyphicon-remove image_failure_task checkImage\\\" ng-show=\\\"!(submission.iSuccess == 1)\\\"></span>\\n\t   Soumission en {{submission.sourceCode.sParams.sLangProg}}\\n\t   le {{submission.sDate | date:\\'dd/MM/yyyy à HH:mm\\'}}\\n\t</span>\\n\t\\n\t<span class=\\\"submission_span submission_data\\\"> <!-- centered datas -->\\n\t</span>\\n\t<span class=\\\"submission_span score\\\">Score : {{submission.iScore}} / 100</span>\\n \\n\t<br />\\n\t   \\n\t<span class=\\\"submission_details\\\">\\n\t   <span ng-if=\\\"submission.submissionSubtasks.length > 0\\\">Sous-tâches validées : {{submissionManager.countSubtasksSucceeded(submission)}} / {{submission.submissionSubtasks.length}}</span>\\n\t   <span ng-if=\\\"submission.submissionSubtasks.length == 0\\\">Test validés : {{submission.nbTestsPassed}} / {{submission.nbTestsTotal}}</span>\\n\t   &nbsp;&nbsp;\\n\t   <span class=\\\"submission_min_test disp_min\\\" ng-if=\\\"!submission.submissionSubtasks\\\" ng-repeat=\\\"curTest in submission.tests\\\" ng-include src=\\\"\\'submission-manager/view_test_min.html\\'\\\"></span>\\n\t   <span class=\\\"submission_min_test\\\" ng-if=\\\"submission.submissionSubtasks\\\" ng-repeat=\\\"submissionSubtask in submission.submissionSubtasks\\\">\\n\t\t  <span ng-repeat=\\\"curTest in submissionSubtask.submissionTests\\\" ng-include src=\\\"\\'submission-manager/view_test_min.html\\'\\\"  class=\\\"disp_min\\\"></span>\\n\t\t  &nbsp;&nbsp;\\n\t   </span>\\n\t</span>\\n </div>\\n\");\n$templateCache.put(\"submission-manager/image_test.html\",\"<span ng-if=\\\"curTest.iScore == 0 || curTest.iScore == 100\\\" class=\\\"{{submissionManager.getClassImageTest(curTest.iErrorCode)}}\\\"></span>\\n<span ng-if=\\\"!(curTest.iScore == 0 || curTest.iScore == 100)\\\" class=\\\"{{submissionManager.getClassImageTest(ERROR_RelativeScore)}}\\\"></span>\\n\");\n$templateCache.put(\"submission-manager/submission.html\",\"<div class=\\\"submission_global\\\">\\n   <div ng-if=\\\"submission != undefined\\\" ng-hide=\\\"loading\\\">\\n      <accordion close-others=\\\"false\\\">\\n         <accordion-group is-open=\\\"showSubmission\\\">\\n            <accordion-heading>\\n               <div ng-include src=\\\"\\'submission-manager/header_template.html\\'\\\"></div>\\n            </accordion-heading>\\n            <div ng-if=\\\"submission != undefined && !submission.bEvaluated && !loading\\\" class=\\\"submission_global\\\">\\n               <div class=\\\"submission_error\\\">\\n                  <p>\\n                    Cette soumission est en train d\\'être évaluée.\\n                  </p>\\n               </div>\\n            </div>\\n            <div ng-if=\\\"submission.bEvaluated\\\">\\n               <div ng-show=\\\"submission.bCompilError\\\" class=\\\"submission_error\\\">\\n                  Erreur de compilation<br />\\n                  <pre>{{submission.sCompilMgs}}</pre>\\n               </div>\\n               \\n               <div ng-show=\\\"!(submission.tests.length > 0) && !submission.bCompilError && submission.bEvaluated\\\" class=\\\"submission_error\\\">\\n                  <p>\\n                     Il n\\'existe pas de tests pour ce problème.\\n                  </p>\\n               </div>\\n               <div ng-hide=\\\"!submission.bEvaluated || submission.bCompilError\\\" ng-if=\\\"submission.tests.length > 0\\\">\\n                  <div ng-if=\\\"submission.sCompilMsg.length > 0\\\" class=\\\"compil_error\\\">\\n                     Résultat de la compilation :\\n                     <pre>{{submission.sCompilMsg}}</pre>\\n                  </div>\\n                  <div ng-if=\\\"submission.submissionSubtasks.length > 0\\\">\\n                     <accordion close-others=\\\"true\\\">\\n                        <accordion-group ng-repeat=\\\"submissionSubtask in submission.submissionSubtasks\\\" class=\\\"subtask_global\\\" is-open=\\\"submissionSubtask.cached.showDetailsTests\\\">\\n                           <div ng-include src=\\\"\\'submission-manager/view_subtask.html\\'\\\"></div>\\n                        </accordion-group>\\n                     </accordion>\\n                  </div>\\n                  <div class=\\\"test\\\" ng-if=\\\"submission.submissionSubtasks.length == 0\\\">\\n                     <accordion close-others=\\\"true\\\">\\n                        <accordion-group ng-repeat=\\\"curTest in submission.tests\\\" is-open=\\\"curTest.cached.isShown\\\">\\n                           <div ng-include src=\\\"\\'submission-manager/view_test.html\\'\\\"></div>\\n                        </accordion-group>\\n                     </accordion>\\n                  </div>\\n               </div> <!-- End tests -->\\n            </div> \\n         </accordion-group>\\n      </accordion>\\n   </div> <!-- End submission details -->\\n</div> <!-- End submission -->\\n\");\n$templateCache.put(\"submission-manager/view_subtask.html\",\"<accordion-heading>\\n\t<div class=\\\"subtask\\\">\\n\t\t<span class=\\\"subtask_name\\\">\\n\t\t\t<span class=\\\"glyphicon glyphicon-ok image_succeed_subtask\\\" ng-show=\\\"submissionSubtask.iSuccess\\\"></span>\\n\t\t\t<span class=\\\"glyphicon glyphicon-remove image_failure_subtask\\\" ng-show=\\\"!submissionSubtask.iSuccess\\\"></span>\\n\t\t\t{{submissionSubtask.subtask_name}} \\n\t\t</span>\\n\t\t\\n\t\t<span class=\\\"subtask_data\\\">\\n\t\t\t<span>\\n\t\t\t\tTests validés : {{countTestsSucceeded(submissionSubtask)}} / {{submissionSubtask.submissionTests.length}}\\n\t\t\t\t<span class=\\\"subtask_min_test\\\">\\n\t\t\t\t\t<span ng-repeat=\\\"curTest in submissionSubtask.submissionTests\\\" ng-include src=\\\"\\'submission-manager/view_test_min.html\\'\\\"  class=\\\"disp_min\\\"></span>\\n\t\t\t\t</span>\\n\t\t\t</span>\\n\t\t</span>\\n\t\t\\n\t\t<span class=\\\"score\\\">\\n\t\t\tScore : {{round(submissionSubtask.iScore * submissionSubtask.subtask_iPointsMax / 100)}} / {{submissionSubtask.subtask_iPointsMax}}\\n\t\t</span>\\n\t</div>\\n</accordion-heading>\\n\\n<div class=\\\"test\\\">\\n\t<accordion close-others=\\\"true\\\">\\n\t\t<accordion-group ng-repeat=\\\"curTest in submissionSubtask.submissionTests\\\" is-open=\\\"curTest.cached.isShown\\\">\\n\t\t\t<div ng-include src=\\\"\\'submission-manager/view_test.html\\'\\\"></div>\\n\t\t</accordion-group>\\n\t</accordion>\\n</div>\\n\");\n$templateCache.put(\"submission-manager/view_test.html\",\"<accordion-heading>\\n   <p ng-click=\\\"clickTest(curTest.id)\\\" ng-if=\\\"curTest.iScore > 0 && curTest.iScore < 100\\\" class=\\\"heading_test\\\"> <!-- i.e relative score -->\\n      <span class=\\\"idTest\\\">\\n         <span ng-include src=\\\"\\'submission-manager/image_test.html\\'\\\" class=\\\"imageTest\\\"></span>\\n         Test n°{{$index+1}} &nbsp; &nbsp;\\n      </span>\\n      <span class=\\\"resultTest {{submissionManager.getClassTest(ERROR_RelativeScore)}}\\\">\\n         Score partiel de {{curTest.iScore}}% en {{floor(curTest.iTimeMs/10)/100}} s\\n      </span>\\n   </p>\\n   <p ng-click=\\\"clickTest(curTest.id)\\\" ng-if=\\\"!(curTest.iScore > 0 && curTest.iScore < 100)\\\" ng-switch=\\\"submissionManager.getStatusTest(curTest.iErrorCode)\\\" class=\\\"heading_test\\\">\\n      <span class=\\\"idTest\\\">\\n         <span ng-include src=\\\"\\'submission-manager/image_test.html\\'\\\" class=\\\"imageTest\\\"></span> \\n         Test n°{{$index+1}} &nbsp; &nbsp;\\n      </span>\\n      <span class=\\\"resultTest {{submissionManager.getClassTest(curTest.iErrorCode)}}\\\" ng-switch-when=\\\"ok\\\">\\n         Réponse correcte en {{floor(curTest.iTimeMs/10)/100}} s\\n      </span>\\n      <span class=\\\"resultTest {{submissionManager.getClassTest(curTest.iErrorCode)}}\\\" ng-switch-when=\\\"error\\\">\\n         Réponse incorrecte\\n      </span>\\n      <span class=\\\"resultTest {{submissionManager.getClassTest(curTest.iErrorCode)}}\\\" ng-switch-when=\\\"errorNoLog\\\">\\n         Erreur dans le résultat\\n      </span>\\n      <span class=\\\"resultTest {{submissionManager.getClassTest(curTest.iErrorCode)}}\\\" ng-switch-when=\\\"abort\\\">\\n         Abort\\n      </span>\\n      <span class=\\\"resultTest {{submissionManager.getClassTest(curTest.iErrorCode)}}\\\" ng-switch-when=\\\"busError\\\">\\n         Bus Error\\n      </span>\\n      <span class=\\\"resultTest {{submissionManager.getClassTest(curTest.iErrorCode)}}\\\" ng-switch-when=\\\"floatingPointExpression\\\">\\n         Floating point Expression\\n      </span>\\n      <span class=\\\"resultTest {{submissionManager.getClassTest(curTest.iErrorCode)}}\\\" ng-switch-when=\\\"memory\\\">\\n         Accès mémoire invalide\\n      </span>\\n      <span class=\\\"resultTest {{submissionManager.getClassTest(curTest.iErrorCode)}}\\\" ng-switch-when=\\\"timeout\\\">\\n         Limite de temps dépassée\\n      </span>\\n   </p>\\n\\n</accordion-heading>\\n<!--<td ng-switch=\\\"curTest.iErrorCode\\\">-->\\n\\n<div ng-if=\\\"curTest.iScore > 0 && curTest.iScore < 100\\\" class=\\\"output\\\"> <!-- i.e relative score -->\\n   Vous avez obtenu un score partiel. Vous pouvez améliorer votre programme pour augmenter votre score.\\n</div>\\n\\n<div ng-if=\\\"curTest.sOutput != \\'\\' && hasLoadedAnimation\\\" class=\\\"output\\\" animation commands=\\\"curTest.sOutput\\\" idtest=\\\"curTest.id\\\"></div>\\n\\n<div ng-if=\\\"!(curTest.iScore > 0 && curTest.iScore < 100) && !(curTest.sOutput != \\'\\' && hasLoadedAnimation)\\\" class=\\\"output\\\" ng-switch=\\\"submissionManager.getStatusTest(curTest.iErrorCode)\\\">\\n   <span ng-switch-when=\\\"ok\\\">\\n      Bravo, votre programme a validé ce test. La réponse donnée par votre programme n\\'est pas affichée pour ne pas révéler d\\'informations sur nos tests.\\n   </span>\\n   <span ng-switch-when=\\\"error\\\">\\n      <span ng-if=\\\"displayError(curTest.ID) && curTest.sOutput.length == 0\\\"> <!-- We use datas in tm_submissions to display log errors if there\\'s nothing in tm_submissions_tests -->\\n         Votre programme a renvoyé :<br/>\\n         <pre class=\\\"log\\\">{{submission.sFirstUserOutput}}</pre>\\n         \\n         Il aurait dû renvoyer :<br/>\\n         <pre class=\\\"log\\\">{{submission.sFirstExpectedOutput}}</pre>\\n         \\n         <span ng-show=\\\"curTest.iErrorCode == ERROR_WrongAnswer\\\"> <!-- diff shall not be shown when iErrorCode = ERROR_WrongAnswerBis -->\\n            Pour vous aider, voici le premier caractère différent : <br />\\n            <pre class=\\\"log\\\" ng-bind-html=\\\"toTrust(firstCharDiff(submission.sFirstUserOutput, submission.sFirstExpectedOutput))\\\"></pre> \\n         </span>\\n      </span>\\n      <span ng-if=\\\"displayError(curTest.ID) && curTest.sOutput.length > 0\\\"> <!-- Otherwise, we use datas in tm_submissions_tests -->\\n         Votre programme a renvoyé :<br/>\\n         <pre class=\\\"log\\\">{{curTest.sOutput}}</pre>\\n         \\n         Il aurait dû renvoyer :<br/>\\n         <pre class=\\\"log\\\">{{curTest.sExpectedOutput}}</pre>\\n         <span ng-show=\\\"curTest.iErrorCode == ERROR_WrongAnswer\\\"> <!-- diff shall not be shown when iErrorCode = ERROR_WrongAnswerBis -->\\n            Pour vous aider, voici le premier caractère différent : <br />\\n            <pre class=\\\"log\\\" ng-bind-html=\\\"toTrust(firstCharDiff(curTest.sOutput, curTest.sExpectedOutput))\\\"></pre>\\n         </span>\\n      </span>\\n      <span ng-if=\\\"!displayError(curTest.ID)\\\">\\n         Aucun log n\\'est disponible pour ce test.\\n      </span>\\n   </span>\\n   <span ng-switch-when=\\\"errorNoLog\\\">\\n      <pre ng-show=\\\"displayError(curTest.ID) && curTest.sOutput.length > 0\\\" class=\\\"log\\\">{{curTest.sOutput}}</pre>\\n   </span>\\n   <span ng-switch-when=\\\"abort\\\">\\n      Votre programme a retourné un abort.\\n      En C++, il peut s\\'agir d\\'une exception non traitée par votre programme.\\n   </span>\\n   <span ng-switch-when=\\\"busError\\\">\\n      Votre programme a retourné un bus Error\\n      Il peut s\\'agir d\\'un problème lié à l\\'utilisation de pointeurs.\\n   </span>\\n   <span ng-switch-when=\\\"floatingPointExpression\\\">\\n      Votre programme s\\'est terminé par un \\\"floating point exception\\\".\\n      Il a probablement tenté d\\'effectuer une division par zéro.\\n   </span>\\n   <span ng-switch-when=\\\"memory\\\">\\n      Votre programme a échoué à la suite d\\'un accès mémoire en dehors des zones réservées, ou d\\'un dépassement de la limite de mémoire.<br />\\n      Votre programme s\\'est terminé à la suite d\\'une erreur. Cela peut venir d\\'une des raisons suivantes :\\n      <ul>\\n         <li>Votre programme a dépassé la limite de mémoire autorisée pour ce problème, que ce soit sous la forme de variables statiques, d\\'allocations dynamiques, ou bien de la pile.</li>\\n         <li>Votre programme a tenté de faire un accès mémoire en dehors des zones allouées.</li>\\n      </ul>\\n   </span>\\n   <span ng-switch-when=\\\"timeout\\\">\\n      Votre programme a dépassé la limite de temps.<br />\\n      Cela peut venir de deux raisons :\\n      <ul>\\n         <li>soit il est trop lent pour passer ce test dans la limite de temps du sujet.</li>\\n         <li>soit il boucle indéfiniment et ne se termine jamais.</li>\\n      </ul>\\n   </span>\\n   <span ng-switch-default>\\n      Un problème a eu lieu lors de la récupération des informations concernant le test.\\n   </span>\\n</div>\\n\");}]);"],"sourceRoot":"/source/"}